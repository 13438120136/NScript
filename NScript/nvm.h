#ifndef _NVM_HEAD
#define _NVM_HEAD

///执行指令类型
typedef int ExecCommand;

#define CMD_POS 0
#define CMD_LEN 6
#define A_POS CMD_LEN
#define A_LEN 8
#define B_POS (CMD_LEN + A_LEN)
#define B_LEN 8

enum Operator
{
	O_NONE = 0, O_LOAD, O_MOVE, O_ADD, O_SUB, O_MUL, O_DIV, O_MOD, 
	O_CALL, O_RETURN
};

/**
  O_LOAD -- 将内容加载到寄存器中
  ---|------|-------------------------
	 |	6	|	虚拟机指令		
  ---|------|-------------------------
	 |	8	|	A	寄存器				
  ---|------|-------------------------
	 |	8	|	B	内容				
  ---|------|-------------------------
	 |	8	|	C	不使用				
  ---|------|-------------------------
	 |  2	|   第一位代表A所在区域, 0:寄存器 1:内容区域
	 |		|   第二位代表B所在区域, 0:寄存器 1:内容区域
  ---|------|-------------------------


    O_MOVE -- 寄存器之间的赋值
  ---|------|-------------------------
	 |	6	|	虚拟机指令		
  ---|------|-------------------------
	 |	8	|	A	寄存器				
  ---|------|-------------------------
	 |	8	|	B	寄存器				
  ---|------|-------------------------
	 |	8	|	C	不使用				
  ---|------|-------------------------
	 |  2	|   第一位代表A所在区域, 0:寄存器 1:内容区域
	 |		|   第二位代表B所在区域, 0:寄存器 1:内容区域
  ---|------|-------------------------


      O_ADD -- 将A和B做加法运算并放入C中(O_SUB O_MUL O_DIV O_MOD)
  ---|------|-------------------------
	 |	6	|	虚拟机指令		
  ---|------|-------------------------
	 |	8	|	A					
  ---|------|-------------------------
	 |	8	|	B					
  ---|------|-------------------------
	 |	8	|	C					
  ---|------|-------------------------
	 |  2	|   第一位代表A所在区域, 0:寄存器 1:内容区域
	 |		|   第二位代表B所在区域, 0:寄存器 1:内容区域
  ---|------|-------------------------


      O_CALL -- 函数调用, 至调用A中的函数
  ---|------|-------------------------
	 |	6	|	虚拟机指令		
  ---|------|-------------------------
	 |	16	|	A					
  ---|------|-------------------------
	 |	10	|	保留		
  ---|------|-------------------------
***/

#define mask_1(pos, len)  (~(((~0)<<len))<<pos)
#define mask_0(pos, len) ~(mask_1(pos, len))
#define setMask(cmd, o, pos, len) cmd = (mask_0(pos, len)&cmd) | (mask_1(pos, len)&(o<<pos))
#define getMask(cmd, pos, len) (mask_1(pos, len)&cmd)>>pos

#endif
